include:
  - local: 'machine-designation.yml'

### Gitlab Runner variables which need to be defined for each product team workflow
###   1) PRODUCT --> (i.e. CodeSight, Sigma, etc.) 
### Gitlab Runner variables which can be defined...
###   1) GENERATE_CONFIGURATION_FILE --> [ 0 | 1 ]
###   2) GENERATION_OPTIONS          --> [ specialization of how to find Blackduck coordinates ]
###   3) ADDON_SBOM_OPTIONS          --> [ specialization of sbom_manager options ]
###   4) CONFIGURATION_FILE          --> [ path to pre-defined configuration file if the GENERATE_CONFIGURATION_FILE is empty or zero ]

### SBOM generation requires a blackduck api token to communicate with the BLACKDUCK_HOST
### If the runner variable section does NOT specify the SBOM_TOKEN_VAULT_PATH and BLACKDUCK_TOKEN_VAULT_KEY, then
###   it will use the default one available for access.  These options allow for additional testing or migration testing
###   of content from vault.
### Note: The BLACKDUCK_API_TOKEN is REQUIRED for using the SBOM automation
.sbom_utils_boiler_plate:
  script:
    - |
      urlencode()
      {
        local old_lc_collate="${LC_COLLATE}"
        LC_COLLATE=C

        local string=$1
        local format=
        local head
        local tail
        set --
        while
          literal=${string%%[!-._~0-9A-Za-z]*}
          case "$literal" in
            ?*)
              format=$format%s
              set -- "$@" "$literal"
              string=${string#$literal};;
          esac
          case "$string" in
            "") false;;
          esac
        do
          tail=${string#?}
          head=${string%$tail}
          format=$format%%%02x
          set -- "$@" "'$head"
          string=$tail
        done
        printf "$format\\n" "$@"
        return 0
      }

      encode_options()
      {
        local encoded_args=
        local cmdarg=

        for cmdarg in $*; do
          encoded_args+=" $( urlencode "${cmdarg}" )"
        done

        local args=
        local a=
        for a in ${encoded_args}; do
          args+="$( printf "%s\n" "${a}" | sed -e 's/%40%40/%20/g' -e 's/%27//g' -e 's/%22//g' -e 's/%3D//g' ) "
        done

        [ -n "${args}" ] && printf "%s\n" "${args}"
        return 0
      }

      if [ ! -f "${CI_PROJECT_DIR}/.installed_synopsys_certs" ]; then
        python3 -m pip install SIGVault synopsys-ca --index-url ${ARTIFACTORY_HOST}/artifactory/api/pypi/pypi-virtual/simple
        install-synopsys-ca
        touch "${CI_PROJECT_DIR}/.installed_synopsys_certs"
      fi

.get_sbom_blackduck_api_token:
  script:
    - !reference [.sbom_utils_boiler_plate, script]
    - |
      ### --> Setting the SBOM_TOKEN_VAULT_PATH/BLACKDUCK_TOKEN_VAULT_KEY if you are testing
      export BLACKDUCK_API_TOKEN=$( sigvault_read_approle.py -p ${SBOM_TOKEN_VAULT_PATH:-sbom/blackduck_api_token} -k ${BLACKDUCK_TOKEN_VAULT_KEY:-token} -a ${VAULT_ADDR} )
      if [ "${BLACKDUCK_API_TOKEN}" == "" ] || [[ ${BLACKDUCK_API_TOKEN} =~ .*exception.* ]]; then
        echo "[ERROR]   Something failed getting the Blackduck API Token from Vault.  Make sure authentication is configured, and certificates are enabled, and you have access to do this."
        exit 1
      else
        echo "[INFO]    Blackduck API Token retrieved..."
      fi

### SBOM generation can support upload to artifactory provided an apikey can be found to use and an artifactory repo is defined.
### If the runner variable section does NOT specify the key 'artifactory_repo' and 'artifactory_apikey' for SBOM_TOKEN_VAULT_PATH
###   then it will use the PRODUCT definition as a mean to determine the directory to find the associated artifactory information
### It is NOT an error condition to NOT find artifactory information -- no artifactory upload will be attempted in this case
.get_sbom_artifactory_api_key:
  script:
    - !reference [.sbom_utils_boiler_plate, script]
    - |
      ### --> Setting the SBOM_TOKEN_VAULT_PATH if you are testing
      lc_PRODUCT="$( printf "%s\n" "${PRODUCT}" | tr '[[:upper:]]' '[[:lower:]]' )"
      export ARTIFACTORY_UPLOAD_REPO=$( sigvault_read_approle.py -p "${SBOM_TOKEN_VAULT_PATH:-sbom/${lc_PRODUCT}}" -k artifactory_repo -a ${VAULT_ADDR} )
      if [ "${ARTIFACTORY_UPLOAD_REPO}" == "" ] || [[ ${ARTIFACTORY_UPLOAD_REPO} =~ .*exception.* ]]; then
        echo "[WARN]    No Artifactory upload repository defined.  No request for pushing to internal Artifactory will be attempted (no key will be extracted from Vault)!"
        ARTIFACTORY_UPLOAD_REPO=  ### --> Ensure this variable is reset to empty
      else
        export ARTIFACTORY_API_TOKEN=$( sigvault_read_approle.py -p "${SBOM_TOKEN_VAULT_PATH:-sbom}/${lc_PRODUCT}" -k artifactory_apikey -a ${VAULT_ADDR} )
        if [ -z "${ARTIFACTORY_API_TOKEN}" ] || [[ ${ARTIFACTORY_API_TOKEN} =~ .*exception.* ]]; then
          echo "[ERROR]   Something failed getting the Artifactory API Token from Vault.  Make sure authentication is configured, and certificates are enabled, and you have access to do this."
          exit 2
        fi
        echo "[INFO]    Artifactory API Token retrieved..."
      fi

### --> Addition to allow for generation of an SBOM configuration file.  This file can still be modified in the
### -->   .support_product_specific_sbom_setup to allow for product specific customization if needed
.generate_sbom_configuration:
  script:
    - |
      ### --> If need to generate a configuration file for use rather than re-using a previously stored one
      ### -->   set this environment variable in the runner.
      echo "[INFO]    Looking to see if generation of configuration required..."
      if [ "${GENERATE_CONFIGURATION_FILE:-0}" -eq 1 ]; then
        cmd="sbom_entrypoint.sh $( encode_options --generate-config --product ${PRODUCT} --bd-url ${BLACKDUCK_HOST} --provide-zip ${GENERATION_OPTIONS} )"
        echo "[INFO]    Command to run --> ${cmd}"
        ${cmd} | tee "${current_dir}/${SBOM_GENERATION_CONFIG_LOG}"
        RC=$?
        if [ "${RC}" -ne 0 ]; then
          echo "[ERROR]   Error generated from SBOM configuration creation!"
          exit "${RC}"
        else
          ### --> Rename the output configuration file to be 'product' dependent
          mv "${current_dir}/updated_configuration.yaml" "${current_dir}/${PRODUCT}.yaml"
          echo "[INFO]    Configuration file generated with name << ${PRODUCT}.yaml >>..."
          cat "${current_dir}/${PRODUCT}.yaml"
        fi
        export CONFIGURATION_FILE="${current_dir}/${PRODUCT}.yaml"
      fi

### --> Addition to allow for customization of a configuration file for SBOM generation (if needed)
.support_product_specific_sbom_setup:
  script:
    - |
      ### --> Allow necessary modification of the ${PRODUCT}.yaml file based on any necessities from the product team
      ### --> This will use (if available) a specific path to the setup script; otherwise it will use the current directory
      script_dir="${SBOM_ADDON_SCRIPT_DIR:-$( pwd )}"
      setup_script="${SBOM_CONFIGURATION_SETUP_SCRIPT:-setup_sbom.sh}"
      if [ -f "${script_dir}/${setup_script}" ] && [ -n "${CONFIGURATION_FILE}" ]; then
        "${script_dir}/${setup_script}" "${CONFIGURATION_FILE}"   ### This should add to the ADDON_SBOM_OPTIONS env var if needed and reconfigure as necessary
        if [ $? -ne 0 ]; then
          echo "[ERROR]   Failed to complete ${script_dir}/${setup_script} found!"
          exit 5
        fi
        echo "[INFO]    Modification of configuration completed via script --> ${script_dir}/${setup_script}"
      fi

### --> Addition of artifactory options to push result to ARTIFACTORY_HOST (if successful)
.prepare_artifactory_sbom_options:
  script:
    - |
      ### --> This sets this option to be empty in the event the product team has their own
      ### -->   setup they use to prepare the sbom configuration system.
      current_dir="$( pwd )"
      ### --> Add on the options to control upload to artifactory if necessary
      if [ -n "${ARTIFACTORY_API_TOKEN}" ]; then
        if [ -z "${ARTIFACTORY_UPLOAD_REPO}" ]; then
          echo "[ERROR]   Requested to upload to artifactory, but NO repository was specified (it must be pre-existing!).  Exiting!"
          exit 3
        fi
        ADDON_SBOM_OPTIONS+=" --artifactory-upload --artifactory-url=${ARTIFACTORY_HOST} --artifactory-repo=${ARTIFACTORY_UPLOAD_REPO}"
        echo "[INFO]    Added artifactory options to commandline for SBOM generation..."
      fi

.get_sbom_tool_help:
  image: releng/sbom_generator:latest
  script:
    - |
      ### --> Run the SBOM generation script with the options that have been assembled
      sbom_entrypoint.sh --help
      exit 0

.get_sbom_tool_version:
  image: releng/sbom_generator:latest
  script:
    - |
      ### --> Run the SBOM generation script with the options that have been assembled
      sbom_entrypoint.sh --version
      exit 0

# This task will execute the creation, collection, and publishing of an SBOM request from Blackduck to Artifactory (if requested)
# This depends on the .get_artifactory_api_key and .get_blackduck_api_token task for credential retrieval.
# Settings from the product team can be done via the gitlab CI runner variable definitions as well as via a hook script
#   from the checked out repository called 'setup_sbom.sh'
# To use the hook script the gitlab runner must have the ADDON_SCRIPT_DIR variable set to the directory of the hook script
# The hook script uses a fixed name --> setup_sbom.sh
.run_sbom_generation:
  image: releng/sbom_generator:latest
  variables:
    SBOM_LOG: sbom_output.log
    SBOM_GENERATION_CONFIG_LOG: sbom_generation_output.log
    ARTIFACTORY_HOST: "https://sig-artifactory.internal.synopsys.com"
    BLACKDUCK_HOST: "https://sig-bd-hub.app.blackduck.com"

  script:
    - echo "[INFO]    Checking to ensure all necessary tokens/keys are available..."
    - !reference [.get_sbom_blackduck_api_token, script]
    - !reference [.get_sbom_artifactory_api_key, script]
    - echo "[INFO]    Preparing options for SBOM application..."
    - !reference [.prepare_artifactory_sbom_options, script]
    - !reference [.generate_sbom_configuration, script]
    - !reference [.support_product_specific_sbom_setup, script]
    - echo "[INFO]    Running SBOM generation now..."
    - |
      ### --> Ensure if a configuration file is to be used, it can be found and added to the cmdline options provided
      if [ -f "${CONFIGURATION_FILE}" ]; then
        echo "[INFO]    Supplying configuration file --> ${CONFIGURATION_FILE}"
        ADDON_SBOM_OPTIONS+=" --config-file ${CONFIGURATION_FILE}"
      fi
      ### --> Run the SBOM generation script with the options that have been assembled
      cmd="sbom_entrypoint.sh $( encode_options --product ${PRODUCT} --bd-url=${BLACKDUCK_HOST} ${ADDON_SBOM_OPTIONS} ${PRODUCT_ADDON_SBOM_OPTIONS} )"
      ${cmd} | tee "${current_dir}/${SBOM_LOG}"
      RC=$?
      if [ "${RC}" -ne 0 ]; then
        echo "[ERROR]   Error generated from SBOM creation!"
      fi
      exit ${RC}

  artifacts:
    paths:
      - ${SBOM_LOG}
      - ${SBOM_GENERATION_CONFIG_LOG}
      - "*.json"
      - "*.zip"
      - "*.yaml"
    expire_in: 5d

